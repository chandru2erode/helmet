# -*- coding: utf-8 -*-
"""Helmet identification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_nCkUvw-IyxQo77CTlMvzh1JBX-JQYDE
"""

# Part 1 - Building the CNN

# Importing the Keras libraries and packages
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense

# Initialising the CNN
classifier = Sequential()

# Step 1 - Convolution
classifier.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))

# Step 2 - Pooling
classifier.add(MaxPooling2D(pool_size = (2, 2)))

# Adding a second convolutional layer
#classifier.add(Conv2D(32, (3, 3), activation = 'relu'))
#classifier.add(MaxPooling2D(pool_size = (2, 2)))

# Step 3 - Flattening
classifier.add(Flatten())

# Step 4 - Full connection
classifier.add(Dense(units = 128, activation = 'relu'))
classifier.add(Dense(units = 1, activation = 'sigmoid'))

# Compiling the CNN
classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

# Part 2 - Fitting the CNN to the images

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

from google.colab import drive
drive.mount('/content/drive')

training_set = train_datagen.flow_from_directory('/content/drive/My Drive/dataset/helmet_training_set',
                                                 target_size = (64, 64),
                                                 batch_size = 32,
                                                 class_mode = 'binary')

test_set = test_datagen.flow_from_directory('/content/drive/My Drive/dataset/helmet_test_set',
                                            target_size = (64, 64),
                                            batch_size = 32,
                                            class_mode = 'binary')

classifier.fit_generator(training_set,
                         steps_per_epoch = 99,
                         epochs = 4,
                         validation_data = test_set,
                         validation_steps = 30)

classifier_json = classifier.to_json()
with open("drive/My Drive/apps/classifier.json", "w") as json_file:
    json_file.write(classifier_json)
    
# serialize weights to HDF5
classifier.save_weights("drive/My Drive/apps/classifier_weights.h5")
print("Saved model to drive")

# test our classifier model
import numpy as np
from keras.preprocessing import image

test_image = image.load_img('/content/drive/My Drive/dataset/helmet_single_predict/nohelmet.jpg', target_size = (64, 64))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)

result = classifier.predict(test_image)

training_set.class_indices
print(training_set.class_indices)

print(result[0][0])

if result[0][0] == 1.0:
    prediction = 'Wearing helmet'
else:
    prediction = 'NOT wearing helmet'
    
print(prediction)